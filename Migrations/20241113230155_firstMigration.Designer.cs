// <auto-generated />
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using dofus_unity_rendering_back;

#nullable disable

namespace dofus_unity_rendering_back.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241113230155_firstMigration")]
    partial class firstMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("dofus_unity_rendering_back.Models.Metadata.Monster.AnimFunMonsterData", b =>
                {
                    b.Property<int>("animId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("animId"));

                    b.Property<int?>("Monstersid")
                        .HasColumnType("integer");

                    b.Property<string>("animName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("animWeight")
                        .HasColumnType("integer");

                    b.Property<int>("entityId")
                        .HasColumnType("integer");

                    b.HasKey("animId");

                    b.HasIndex("Monstersid");

                    b.ToTable("AnimFunMonsterRecords");
                });

            modelBuilder.Entity("dofus_unity_rendering_back.Models.Metadata.Monster.MonsterDrop", b =>
                {
                    b.Property<int>("objectId")
                        .HasColumnType("integer");

                    b.Property<int>("dropId")
                        .HasColumnType("integer");

                    b.Property<int>("monsterId")
                        .HasColumnType("integer");

                    b.Property<int?>("Monstersid")
                        .HasColumnType("integer");

                    b.Property<int?>("Monstersid1")
                        .HasColumnType("integer");

                    b.Property<int>("count")
                        .HasColumnType("integer");

                    b.Property<string>("criteria")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("hasCriteria")
                        .HasColumnType("boolean");

                    b.Property<bool>("hiddenIfInvalidCriteria")
                        .HasColumnType("boolean");

                    b.Property<float>("percentDropForGrade1")
                        .HasColumnType("real");

                    b.Property<float>("percentDropForGrade2")
                        .HasColumnType("real");

                    b.Property<float>("percentDropForGrade3")
                        .HasColumnType("real");

                    b.Property<float>("percentDropForGrade4")
                        .HasColumnType("real");

                    b.Property<float>("percentDropForGrade5")
                        .HasColumnType("real");

                    b.HasKey("objectId", "dropId", "monsterId");

                    b.HasIndex("Monstersid");

                    b.HasIndex("Monstersid1");

                    b.ToTable("MonsterDropRecords");
                });

            modelBuilder.Entity("dofus_unity_rendering_back.Models.Metadata.Monster.MonsterDropCoefficient", b =>
                {
                    b.Property<int>("monsterGrade")
                        .HasColumnType("integer");

                    b.Property<int>("monsterId")
                        .HasColumnType("integer");

                    b.Property<string>("criteria")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("dropCoefficient")
                        .HasColumnType("real");

                    b.HasKey("monsterGrade", "monsterId");

                    b.ToTable("MonsterDropCoefficientRecords");
                });

            modelBuilder.Entity("dofus_unity_rendering_back.Models.Metadata.Monster.MonsterGrade", b =>
                {
                    b.Property<int>("grade")
                        .HasColumnType("integer");

                    b.Property<int>("monsterId")
                        .HasColumnType("integer");

                    b.Property<int?>("Monstersid")
                        .HasColumnType("integer");

                    b.Property<short>("actionPoints")
                        .HasColumnType("smallint");

                    b.Property<int>("agility")
                        .HasColumnType("integer");

                    b.Property<short>("airResistance")
                        .HasColumnType("smallint");

                    b.Property<short>("bonusRange")
                        .HasColumnType("smallint");

                    b.Property<int>("chance")
                        .HasColumnType("integer");

                    b.Property<byte>("damageReflect")
                        .HasColumnType("smallint");

                    b.Property<short>("earthResistance")
                        .HasColumnType("smallint");

                    b.Property<short>("fireResistance")
                        .HasColumnType("smallint");

                    b.Property<int>("gradeXp")
                        .HasColumnType("integer");

                    b.Property<byte>("hiddenLevel")
                        .HasColumnType("smallint");

                    b.Property<int>("intelligence")
                        .HasColumnType("integer");

                    b.Property<int>("level")
                        .HasColumnType("integer");

                    b.Property<int>("lifePoints")
                        .HasColumnType("integer");

                    b.Property<short>("movementPoints")
                        .HasColumnType("smallint");

                    b.Property<short>("neutralResistance")
                        .HasColumnType("smallint");

                    b.Property<short>("paDodge")
                        .HasColumnType("smallint");

                    b.Property<short>("pmDodge")
                        .HasColumnType("smallint");

                    b.Property<int>("startingSpellId")
                        .HasColumnType("integer");

                    b.Property<int>("strength")
                        .HasColumnType("integer");

                    b.Property<int>("vitality")
                        .HasColumnType("integer");

                    b.Property<short>("waterResistance")
                        .HasColumnType("smallint");

                    b.Property<int>("wisdom")
                        .HasColumnType("integer");

                    b.HasKey("grade", "monsterId");

                    b.HasIndex("Monstersid");

                    b.ToTable("MonsterGradeRecords");
                });

            modelBuilder.Entity("dofus_unity_rendering_back.Models.Metadata.Monster.Monsters", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<short>("aggressiveAttackDelay")
                        .HasColumnType("smallint");

                    b.Property<string>("aggressiveImmunityCriterion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<short>("aggressiveLevelDiff")
                        .HasColumnType("smallint");

                    b.Property<byte>("aggressiveZoneSize")
                        .HasColumnType("smallint");

                    b.Property<bool>("allIdolsDisabled")
                        .HasColumnType("boolean");

                    b.Property<bool>("canBeCarried")
                        .HasColumnType("boolean");

                    b.Property<bool>("canBePushed")
                        .HasColumnType("boolean");

                    b.Property<bool>("canPlay")
                        .HasColumnType("boolean");

                    b.Property<bool>("canSwitchPos")
                        .HasColumnType("boolean");

                    b.Property<bool>("canSwitchPosOnTarget")
                        .HasColumnType("boolean");

                    b.Property<bool>("canTackle")
                        .HasColumnType("boolean");

                    b.Property<bool>("canUsePortal")
                        .HasColumnType("boolean");

                    b.Property<int>("correspondingMiniBossId")
                        .HasColumnType("integer");

                    b.Property<short>("creatureBoneId")
                        .HasColumnType("smallint");

                    b.Property<bool>("fastAnimsFun")
                        .HasColumnType("boolean");

                    b.Property<int>("favoriteSubareaId")
                        .HasColumnType("integer");

                    b.Property<int>("gfxId")
                        .HasColumnType("integer");

                    b.Property<long[]>("incompatibleChallenges")
                        .IsRequired()
                        .HasColumnType("bigint[]");

                    b.Property<long[]>("incompatibleIdols")
                        .IsRequired()
                        .HasColumnType("bigint[]");

                    b.Property<bool>("isBoss")
                        .HasColumnType("boolean");

                    b.Property<bool>("isMiniBoss")
                        .HasColumnType("boolean");

                    b.Property<bool>("isQuestMonster")
                        .HasColumnType("boolean");

                    b.Property<string>("look")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("nameId")
                        .HasColumnType("integer");

                    b.Property<short>("race")
                        .HasColumnType("smallint");

                    b.Property<byte>("scaleGradeRef")
                        .HasColumnType("smallint");

                    b.Property<bool>("soulCaptureForbidden")
                        .HasColumnType("boolean");

                    b.Property<short>("speedAdjust")
                        .HasColumnType("smallint");

                    b.Property<List<string>>("spellGrades")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<List<int>>("spells")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.Property<long[]>("subareas")
                        .IsRequired()
                        .HasColumnType("bigint[]");

                    b.Property<bool>("useBombSlot")
                        .HasColumnType("boolean");

                    b.Property<bool>("useRaceValues")
                        .HasColumnType("boolean");

                    b.Property<bool>("useSummonSlot")
                        .HasColumnType("boolean");

                    b.HasKey("id");

                    b.ToTable("MonstersRecords");
                });

            modelBuilder.Entity("dofus_unity_rendering_back.Models.Metadata.Monster.AnimFunMonsterData", b =>
                {
                    b.HasOne("dofus_unity_rendering_back.Models.Metadata.Monster.Monsters", null)
                        .WithMany("animFunList")
                        .HasForeignKey("Monstersid");
                });

            modelBuilder.Entity("dofus_unity_rendering_back.Models.Metadata.Monster.MonsterDrop", b =>
                {
                    b.HasOne("dofus_unity_rendering_back.Models.Metadata.Monster.Monsters", null)
                        .WithMany("drops")
                        .HasForeignKey("Monstersid");

                    b.HasOne("dofus_unity_rendering_back.Models.Metadata.Monster.Monsters", null)
                        .WithMany("temporisDrops")
                        .HasForeignKey("Monstersid1");
                });

            modelBuilder.Entity("dofus_unity_rendering_back.Models.Metadata.Monster.MonsterGrade", b =>
                {
                    b.HasOne("dofus_unity_rendering_back.Models.Metadata.Monster.Monsters", null)
                        .WithMany("grades")
                        .HasForeignKey("Monstersid");
                });

            modelBuilder.Entity("dofus_unity_rendering_back.Models.Metadata.Monster.Monsters", b =>
                {
                    b.Navigation("animFunList");

                    b.Navigation("drops");

                    b.Navigation("grades");

                    b.Navigation("temporisDrops");
                });
#pragma warning restore 612, 618
        }
    }
}
